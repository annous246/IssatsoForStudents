<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<style>
    *{
        box-sizing: border-box;
    }
    #p{
        white-space: pre-wrap;
    }
body{display: flex;
flex-direction: column;
align-items: center;
text-align: center;

transition: 0.2s;

}
.blackout{
    background-color: rgba(9, 1, 1, 0.625);
    transition: 0.2s;
}
.pt{
    padding: 1em;;
    margin: 1em;;
    border: black solid 0.08em;
    border-radius:0.5em;
    width: 50%;
}

.pt img{
    border-radius: 1em;

    
}
.prime,.roman,#ul{
    background-color: rgb(101, 136, 232);
    color:white;
    padding:1em;
    margin: 1em;
    border: 0.1em rgb(88, 92, 115) solid;
    border-radius:0.8em;
    font-size: 1.2em;
    font-weight: bold;
   text-decoration: none;
}
.roman a{
    text-decoration: none;
color:white;

}
.prime p{
    font-size: 0.5em;

}
#p{
    background-color: rgb(198, 240, 114);
    color: rgb(0, 0, 0);
}
button{
    background-color: rgb(101, 136, 232);
    color:white;
    padding:1em;
    margin: 1em;
    border: 0.1em rgb(88, 92, 115) solid;
    border-radius:0.8em;
    font-size: 1.2em;
    font-weight: bold;
    cursor: pointer;
}

.add-btn{
        font-size:1.2em;
        color: white;
        transition: 0.3s;
        margin:1em;
    font-size: 1em;
    padding: 1.34em;
    }
    
    .add-btn span{
        border:0.08em solid white;
        border-radius: 10em;
        padding:0.1em;
        padding-left:0.3em ;
        padding-right:0.3em ;
        transition: 0.3s;

    }
    
    .add-btn:hover span{
        background-color: white;
        transition: 0.3s;
        color:rgb(101, 136, 232);
    }
    .add-btn:hover{
        border:0.1em solid white;
        transition: 0.3s;

    }
    #badges-array{
        border:0.08em solid black;
        padding: 1em;
        background-color: rgba(244, 163, 13, 0.522);
        border-radius: 1em;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        align-items: center;
        text-align: center;
        justify-content: center;
    }
    .badge-element{
        display: flex;
        flex-direction: column;
        flex-wrap: nowrap;
    background-color: white;
    color:rgb(18, 99, 212);
    padding:1em;
    margin: 1em;
    border: 0.1em rgb(88, 92, 115) solid;
    border-radius:0.8em;
    font-weight: bold;
    width: 2em;
    height: 2em;
    text-align: center;
    align-items: center;
    justify-content: center;
    font-family:Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
    font-weight: bold;

    }
    #badge-check{
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content:center ;
        align-items: center;
        text-align: center;
        position: absolute;
        left: 40%;
        top: 50%;
        background-color: rgba(135, 132, 132, 0.61);
        border:0.08em solid black;
        border-radius: 1em;
        display: none;
        opacity: 0;
        transition: 0.2s;
    }
    .appear{
        display: block !important;
        opacity: 1 !important;
        transition: 0.2s;

    }
    #badge-check h2{
        padding: 1em;
        font-size: 1.2em;
        font-family: Georgia, 'Times New Roman', Times, serif;
        color: white;
        border:0.08em solid black;
        border-radius: 1em;
        width: 100%;
        margin: 0.1em;
    }
    #check-form{
        width: 100%;
    }
    .try{
        background-color: transparent;
        width: 5em;
        height: 5em;
        cursor: pointer;
        position: absolute;
        border-radius: 1em;
        -webkit-appearance: none;
        transition: 0.2s;
    }
    .try:hover{
        background-color: rgba(38, 74, 219, 0.200);
        transition: 0.2s;
    }
    .try:checked{
        background-color: rgba(38, 74, 219, 0.459);
        transition: 0.2s;
    }
    #check-form{
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        align-items: center;
        text-align: center;
        justify-content: center;
    }
    #check-form button{
        width: 100%;
        transition: 0.2s;

    }
    #check-form button:hover{
        background-color: white;
        color:rgb(18, 99, 212);
        transition: 0.2s;
        
    }
    #title{
        display: flex;
        flex-direction: row;
        flex-wrap: nowrap;
        justify-content: center;
        align-items: center;
        text-align: center;
        width: 100%;

    }
    #title h2{

     width: 90%;
     margin-left: 1em;
    }
    #title #exit{

     width: 10%;
     display: flex;
     flex-direction: column;
     flex-wrap: nowrap;
     justify-content: center;
        align-items: center;
        text-align: center;
     border:0.08em solid black;
        border-radius: 1em;
        padding: 0.5em;
        font-size: 1.2em;
        font-weight: bold;
        background-color: rgba(255, 0, 0, 0.479);
        color: white;
        cursor: pointer;
        transition: 0.2s;
    }
    #title #exit:hover{
        background-color: white;
        color:rgba(255, 0, 0, 0.479); ;
     border:0.08em solid transparent;
        transition: 0.2s;

    }
    #notifications{
        background-color: red;
        padding: 0.2em;
        margin-left: 1em;
        font-size: 0.9em;
        border: 0.02em black solid;
        border-radius: 1em;
    }

    /*
    <div id="classrooms">
        <h1>Classrooms</h1>
        <div id="classrooms-array">
            <form id="add-classroom">
                <button type="submit" class="add-btn" id="classrooms-add-btn"><span>+</span></button>
            </form>
                    <div class="classroom-element">classroom</div>
        </div>
    </div>*/
    
    #classrooms-array{
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
        text-align: center;
        background-color: rgba(53, 87, 224, 0.881);
        border: 0.02em black solid;
        border-radius: 1em;

    }
    #classrooms-add-btn{
        height: 15em;
        margin: 3em;
        padding: 3em;
        width: 10em;

        
    }
    #classrooms-add-btn span{
       padding: 1em;
    }
    .classroom-element{
        display: flex;
        flex-direction: column;
        flex-wrap: nowrap;
        align-items: center;
        text-align: center;
        background-color: white;
        border: 0.02em black solid;
        border-radius: 1em;
        padding: 1em;
        margin: 3em;
        height: 15em;
        width: 10em;
        overflow: hidden;
    }
                   /* <div class="classroom-element">
                        <div id='screen'>python</div>
                        <div id='title'>python</div>
                        <div id='line'><br></div>
                        <div id='id'>Room ID<br>1596189d</div>
                        <div id="sharediv"><button id="share">Share</button></div>
                        <div id="room-utilities">
                            <button id="settings">S</button>
                            <button id="enter">Enter</button>
                            <button id="delete">Delete</button>
                        </div>
                    </div>*/
    #room-utilities{
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;

    }
    #settings,#enter,#delete{
        padding:0.5em;
       margin: 0.5em;
       font-size: 0.6em;
       margin-top: 25%;
    }
    #settings{
        background-color: transparent;
        align-self: flex-start;
        margin-right: 2em;
        margin-left: 0;
    }
    #enter,#delete{
        background-color: transparent;
        align-self: flex-end;
        background-color: rgb(7, 133, 244);
        border: solid transparent 0.1px ;
    }
    #enter{
        margin-left:0;
        box-shadow: 0.4em 0.1em 0.5em  rgb(0, 136, 241);
        transition: 0.2s;
    }
    #delete{
        margin-right:0;
        box-shadow: 0.4em 0.1em 0.5em  rgb(0, 136, 241);
        transition: 0.2s;
    }
    #enter:hover{
        margin-left:0;
        background-color: white;
        color: rgb(0, 136, 241);
        border: solid rgb(0, 136, 241) 0.1px;
        box-shadow:none;
        transition: 0.2s;
    }
    #delete:hover{
        margin-right:0;
        background-color: white;
        color: rgb(0, 136, 241);
        border: solid rgb(0, 136, 241) 0.1px ;
        box-shadow:none;
        transition: 0.2s;
    }
    #screen{
        width:100%;
        padding: 2em;
        border-radius: 1em;
        margin: 0;
        background: linear-gradient(180deg,rgb(0, 72, 255),rgba(39, 1, 255, 0.708));
        color: white;
        font-family:Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;
        font-size: 1.1em;
        margin-bottom: 0.5em;
        
    }
    #title,#id{
        font-size: 0.7em;
    }
    #line {
        width:100%;
        background-color: rgb(0, 140, 255);
        height: 0.03em;
        margin: 0.5em;
    }
    #main-container{
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
        text-align: center;

    }
    #main-container h1{

        width: 100%;
    }
    ::-webkit-scrollbar{
        appearance: none;
        width: 0.9em;
    }
    ::-webkit-scrollbar-thumb{
        border-radius: 5em;
        border: 0.08em black solid;
        background-color: rgb(94, 97, 99);
        margin: 1em;
        padding: 1em;
    }
    ::-webkit-scrollbar-button{
        border-radius: 0.4em;
        border: 0.08em black solid;
        background-color: rgba(3, 37, 60, 0.301);
        margin: 1em;
        padding: 1em;

    }
    ::-webkit-scrollbar-track-piece{
        border-radius: 5em;
        border: 0.08em black solid;
        background-color: rgba(0, 0, 0, 0.51);
        padding: 1em;
    }
    #fl-container{
        width: 40%;
        height: 36em;
        border-radius: 0.5em;
        border: 0.08em black solid;
        scrollbar-gutter: stable;
    }
    #friends{
        border-radius: 0 0 0.5em 0.5em;
        max-height: 32.3em;
        overflow-y: auto;
        background-color: rgba(5, 255, 151, 0.244);
        padding: 1em;
        border: 0.08em black solid;

    }
    #fl-container h3{
        justify-self: start;
        align-self: flex-start;
        align-self: self-start;
        align-items: start;
        align-content: start;

    }
    .block-btn,.message-btn{
        background-color: rgba(238, 19, 19, 0.705);
        padding: 0.5em;
        font-size: 1em;
        font-weight: none;
        border: 0.05em black solid;
        width: 30%;
        transition:all 0.2s;

    }
    .message-btn{
        background-color: rgba(19, 37, 238, 0.61);
        width: 100%;
    }
    .message-btn:hover{
        color: rgba(19, 37, 238, 0.61);
        background-color: white;
        border: 0.05em rgba(19, 37, 238, 0.61) solid;

    }
    .block-btn:hover{
        background-color: rgba(255, 255, 255, 0.705);
        padding: 0.5em;
        font-size: 1em;
        font-weight: none;
        color:rgba(238, 19, 19, 0.705) ;
        border: 0.05em rgba(238, 19, 19, 0.705) solid;
        transition:all 0.2s;
    }
    .friend-name{
        width: 50%;
        margin-top: 1em;
        margin-bottom: 1em;
    }
    .friend{
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
        text-align: center;
        border: 0.05em black solid;
        margin: 0.4em;
        transition: all 0.2s;
    }
    .pending .friend-name{
        width: 100%;

    }
    .pending .accept-btn,.decline-btn{
        width: 100%;

    }
    .pending .accept-btn{
        background-color: rgba(19, 238, 107, 0.705);

    }
    .pending .accept-btn:hover{
        color: rgba(19, 238, 107, 0.705);
        background-color: white;
        border: 0.05em rgba(19, 238, 107, 0.705) solid;

    }
    .blocked .unblock-btn{
        background-color: rgba(19, 169, 238, 0.705);
        width: 40%;

    }
    .blocked .friend-name{
        width: 30%;
    }
    .blocked .unblock-btn:hover{
        color: rgba(19, 169, 238, 0.705);
        background-color: white;
        border: 0.05em rgba(19, 169, 238, 0.705) solid;

    }
    .hide{
        opacity: 0 !important;
        transition: all 0.2s;
    }

</style>
<body>
    <div id="badge-check">
        <div id="title"><h2>Choose A Badge</h2> <button  id="exit">X</button></div>
       
        <form id="check-form" method="post" action='/testing'>
       <% let mybadges=user.badges;
       let allbadgenames=[]
       for(let v in allbadges){
        allbadgenames.push(v);
       }

         for(let k in mybadges){
            if(mybadges[k].status==2||mybadges[k].status==-1){
                for(let v in allbadgenames){
                    if(allbadgenames[v]==k)allbadgenames[v]='';
                   
                }
            }
         }
         for(let v in allbadgenames){
             if(allbadgenames[v]!=''){%>
                
        <div class="badge-element"><%=allbadgenames[v]%><input name="badge" type='radio'  class="try" value="<%=allbadgenames[v]%>" ></div>
            <% }
         }%>

            <button type="submit">Proceed To Test</button>
        </form>


    </div>
    <div id="main-container">
    <h1>Welcome <%= message.username%> !</h1>
    <div class="pt">
        <h2>Your Wallet</h2>
        <img src="coin.jpg" >
        <h3><%=message.points%></h3>
        <% if(!message.prime){%>
            <form method="post" action="/prime">
               <button type="submit">
            <div class="prime">Go Prime!<p>(10 Coins)</p></div>
              </button> 
            </form>
        <%}
        else{%>
            <div class="prime" id="p">Prime User</div>

            <%}%>

    </div>
    <div id="fl-container">
        <h3>Friends List</h3>
        <div id="friends">

        <%
        for(let element in friendslist){%>
            <div class="friend" id='<%=friendslist[element]["email"]%>'>
                <span class="friend-name"  ><%=friendslist[element]["name"]%></span>
                    <button class="block-btn">Block</button>
                    <button class="message-btn">Messages</button>
                 
            </div>
            
            
        <%}
         for(let element in pendingslist){
            %>
            <div class="friend pending" id='<%=pendingslist[element]["email"]%>'>
                <span class="friend-name" ><%=pendingslist[element]["name"]%></span>
                    <button class="block-btn accept-btn">Accept</button>
                    <button class="block-btn decline-btn">Decline</button>
                 
            </div>
        <%}
        for(let element in declineslist){%>
           <div class="friend pending" id='<%=declineslist[element]["email"]%>'>
               <span class="friend-name" ><%=declineslist[element]["name"]%></span>
                   <button class="block-btn accept-btn">Accept</button>
                
           </div>
       <%}
         for(let element in blockslist){%>
            <div class="friend blocked" id='<%=blockslist[element]["email"]%>'>
                <span class="friend-name" ><%=blockslist[element]["name"]%></span>
                    <button class="block-btn unblock-btn">Unblock</button>
                 
            </div>
            
        <%}%>
        </div>
    </div>
</div>
    <div>
    <a href="logout.ejs">Logout</a>

   <div class="roman"> <% if(message.prime){%><a href="converter.ejs">Roman Number Converter</a>
<%}
    else{%>
        <a href="">Roman Number Converter (Prime Users Only)</a>
    <%}%>


</div>
</div>
    <a id="ul" href="users_list.ejs">Users List</a>
    <a id="ul" href="users_ranking.ejs">Users Ranking</a>
    <a id="ul" href="live_stream.ejs">Live Stream</a>
    <a id="ul" href="posting.ejs">Posting and Feeds</a>
    <a id="ul" href="productivity_app.ejs">Broductivity App (Prime Users Only)</a>
    <a id="ul" href="history.ejs">Game History</a>
    <a id="ul" href="general_chat.ejs" >General chat
        <% if(gcm-um>99){%><span id="notifications">+99</span><%} else{%><span id="notifications"><%=gcm-um%></span><%}%> </a>
    
    <a id="ul" href="watch_together.ejs">Watch Together(Prime Users Only)</a>
    <form method="post" action='/play' id="playform">
    <button id="ul" class="play-btn" type="submit">Play</button></form>
    <% if(message!=''){%>
        <div><h2><%=message.msg%></h2></div>
    <%}%>
    <div id="badges">
        <h1>Badges</h1>
        <div id="badges-array">
            <form id="add-badge">
                <button type="submit" class="add-btn"><span>+</span></button>
            </form>
            <% for(let k in mybadges){
                if(mybadges[k].status==2){%>
                    <div class="badge-element"><%=k%></div>

                <%}
            }%>
        </div>
    </div>


    
    <div id="classrooms">
        <h1>Classrooms</h1>
        <div id="classrooms-array">
            <form id="add-classroom" method="post" action="/add_classroom">
                <button type="submit" class="add-btn" id="classrooms-add-btn"><span>+</span></button>
            </form><% for(let k in user.classrooms){let element=user.classrooms[k];if(element.domain=='')continue;%>
                    <div class="classroom-element">
                    

                    
                        
                        <div id='screen'><%=element.domain%></div>
                        <div id='title'><%=element.classroomtitle%></div>
                        <div id='line'><br></div>
                        <div id='id'>Room ID<br>1596189d</div> <div id="room-utilities">
                            <button id="settings">S</button>
                            <button id="enter">Enter</button>
                            <button id="delete">Delete</button>
                        </div>

                  </div> <% }%>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script id="ejs" type="application/json" gcm="<%=gcm%>" um="<%=um%>" email="<%=user.email%>"></script>
    <script>
        let classroomform=document.getElementById('add-classroom')
        let badgeform=document.getElementById('add-badge');
        let exitbtn=document.getElementById('exit');
        let checkform=document.getElementById('check-form');
        let play=(document.getElementsByClassName('play-btn'))[0]
        let playform=(document.getElementById('playform'))
        let clicks=0;
        let notif=document.getElementById('notifications');
        let ejs=document.getElementById('ejs');
        let gcm=ejs.getAttribute('gcm');
        let um=ejs.getAttribute('um');
        let em=ejs.getAttribute('email');
        let socket=io()
        badgeform.addEventListener('submit',(e)=>{
            e.preventDefault();
            let bd=document.querySelector('body');
            let badgecheck=document.getElementById('badge-check');
            bd.className='blackout';
            badgecheck.classList.add('appear');



        })
        exitbtn.addEventListener('click',(e)=>{
            e.preventDefault();
            let bd=document.querySelector('body');
            let badgecheck=document.getElementById('badge-check');
            bd.className='';
            badgecheck.classList.remove('appear')

        })
        checkform.addEventListener('submit',(e)=>{
            let badges=document.getElementsByClassName('try');
            let ind=0,element=null;
            for(ind=0;ind<badges.length;ind++){
             if(badges[ind].checked){
                element=badges[ind];break;
             }
            }
            console.log(element);
            if(!element){
                e.preventDefault();
                console.log('zab');
            }

        })
        playform.addEventListener('submit',(e)=>{
           play.type='button';
           play.disabled=true;
        })
        socket.on('new messages',(data)=>{
            console.log('new ms'+data);
            if(data-parseInt(um)>99)
         notif.textContent='+99';
        else 
         notif.textContent=JSON.stringify(data-parseInt(um));

        })
        //friends list pending
        //friends accepting
         accept();
            //friends declining
        decline();
        
            //friends blocking
            block()
            socket.on('friend blocked you',(data)=>{
           if(em==data.user){
            let allfriends=document.getElementsByClassName('friend')
            for(let k =0;k<allfriends.length;k++){
                if(allfriends[k].classList.length>1)continue;
                if(allfriends[k].id==data.other){
                    allfriends[k].innerHTML="";
                    break;
                }
            }
           }
            })
            

          //friend unblocking
          unblock()

          






















        function decline(){
        let declinelistbtn=document.getElementsByClassName('decline-btn');
        for(let k=0;k<declinelistbtn.length;k++){
            let element=declinelistbtn[k];
            element.addEventListener('click',(e)=>{
                e.preventDefault();
            let parent=element.parentElement;
            let email=parent.id
            socket.emit("friend decline",({email:email,user:em}));
            socket.on("friend declined",()=>{
    
    let pt=parent
    let bbtn=pt.children[1];
    console.log(bbtn);
    let spn=pt.firstElementChild
    setTimeout(()=>{
        pt.classList.add("hide");
    },200)
    setTimeout(()=>{
    pt.innerHTML=""
    pt.className="friend";
    pt.appendChild(spn);
    pt.appendChild(bbtn)
        pt.classList.remove("hide");
   accept()//accept linker
    },450)
                
            })
            })
        }

        }

        function accept(){

            let acceptlistbtn=document.getElementsByClassName('accept-btn');

for(let k=0;k<acceptlistbtn.length;k++){
    let element=acceptlistbtn[k];console.log(k);
    element.addEventListener('click',(e)=>{
        e.preventDefault();
    let parent=element.parentElement;
    console.log(parent)
    let email=parent.id
    socket.emit("friend accept",({email:email,user:em}));
    socket.on("friend accepted",()=>{
    
        let pt=parent
        let bbtn=document.createElement('button');
        bbtn.className='block-btn'
        bbtn.textContent="Block"
        let mbtn=document.createElement('button');
        mbtn.className='message-btn'
        mbtn.textContent="Messages"
        let spn=pt.firstElementChild
        console.log(spn);
        setTimeout(()=>{
            pt.classList.add("hide");
        },200)
        setTimeout(()=>{
        pt.innerHTML=""
        pt.className="friend";
        pt.appendChild(spn);
        pt.appendChild(bbtn)
        pt.appendChild(mbtn)
            pt.classList.remove("hide");
       block()//block linker
        },450)
        
    })
    })}

}

function block(){
       
    let blocklistbtn=document.getElementsByClassName('block-btn');
           
            
        
    for(let k=0 ;k<blocklistbtn.length;k++){
   
        let element=blocklistbtn[k];
        if(element.classList.length>1)continue;
        element.addEventListener('click',(e)=>{
            e.preventDefault();
        let parent=element.parentElement;
        
        let email=parent.id
        socket.emit("friend block",({email:email,user:em}));
        socket.on("friend blocked",()=>{
            let pt=parent
            let bbtn=document.createElement('button');
            bbtn.classList.add('block-btn')
            bbtn.classList.add('unblock-btn')
            bbtn.textContent="Unblock"
            let spn=pt.firstElementChild
            setTimeout(()=>{
                pt.classList.add("hide");
            },200)
            setTimeout(()=>{
            pt.innerHTML=""
            pt.classList.add('blocked');
            pt.appendChild(spn);
            pt.appendChild(bbtn)
                pt.classList.remove("hide");
              unblock()//unblock linker
            },450)
        })
        })
    }

}

function unblock(){
    

    let unblocklistbtn=document.getElementsByClassName('unblock-btn');
            






    if(unblocklistbtn.length>0){
for(let k =0;k<unblocklistbtn.length;k++){
    let element=unblocklistbtn[k];
    element.addEventListener('click',(e)=>{
        e.preventDefault();
    let parent=element.parentElement;
    let email=parent.id
    socket.emit("friend unblock",({email:email,user:em}));
    socket.on("friend unblocked",()=>{
        let pt=parent
        let bbtn=document.createElement('button');
        bbtn.className='block-btn'
        bbtn.textContent="Block"
        let mbtn=document.createElement('button');
        mbtn.className='message-btn'
        mbtn.textContent="Messages"
        let spn=pt.firstElementChild
        setTimeout(()=>{
            pt.classList.add("hide");
        },200)
        setTimeout(()=>{
        pt.innerHTML=""
        pt.classList.remove('blocked');
        pt.appendChild(spn);
        pt.appendChild(bbtn)
        pt.appendChild(mbtn)
            pt.classList.remove("hide");
            block()//block linker


        },450)
    })
    })
}}



}
    </script>
</body>
</html>